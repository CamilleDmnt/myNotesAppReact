import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'

import Counter from './components/Counter'
import NoteList from './components/NoteList'
import Filters from './components/Filters'
import AddNoteForm from './components/AddNoteForm'


function App() {
  const [notes, setNotes] = useState([
    { id: 1, text: "premiÃ¨re note" },
    { id: 2, text: "deuxiÃ¨me note" },
    { id: 3, text: "troisiÃ¨me note" }
  ]);
  
  //filterText = varible d'Ã©tat
  //setFilterText = fonction pour mettre Ã  jour l'Ã©tat
  const[filterText, setFilterText] = useState('');

  // FONCTION POUR AJOUTER UNE NOTE
  const addNote = (text) => {
    const newNote = {
      // id: Date.now(), //gÃ©nÃ©re la date comme id 
      text : text
    };
    setNotes (prevNotes => [... prevNotes, newNote]);
    console.log(newNote);
  }

  //FONCTION POUR SUPPRIMER UNE NOTE
  function onRemoveNoteBtnHandler(noteToDelete) {

    console.log('click on remove note', noteToDelete);

    //on garde toutes les notes qui ne sont pas celle Ã  supprimer
    const newNote = notes.filter(note => note.id !== noteToDelete.id);
    setNotes(newNote); //mis Ã  jour des notes
  }

  // Fonction pour gÃ©rer le  filtre de note
  const handleFilterChange = (newFilterText) => {
    setFilterText(newFilterText);
  }

  // LA VUE
  return (
    <>
      <h1> Application Notes ðŸ“‹</h1>

      <AddNoteForm onAddNote={addNote} />

      <Counter totalNotes={notes.length} />
      
      {/* Passer la fonction de mise Ã  jour de l'Ã©tat du filtre */}
      <Filters filterText={filterText} onFilterChange={handleFilterChange} /> 

      {/* Passer filterText en tant que prop Ã  NoteList */}
      <NoteList notes={notes} onRemoveBtn={onRemoveNoteBtnHandler} />
    </>
  )
}

export default App
